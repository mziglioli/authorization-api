package com.mz.authorization.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.mz.authorization.exception.ValidationException;
import com.mz.authorization.response.JwtResponse;
import com.mz.authorization.response.UserResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Slf4j
@Service
public class SecureService {

  private final JwtService jwtService;
  private final ObjectMapper mapper;

  @Autowired
  public SecureService(JwtService jwtService, ObjectMapper mapper) {
    this.jwtService = jwtService;
    this.mapper = mapper;
  }

  public JwtResponse createJwtResponse(UserResponse userResponse) {
    try {
      if (!userResponse.isValid()) {
        throw new ValidationException("JWT error: user must be valid");
      }
      String token = tokenise(userResponse);
      if (token != null) {
         return new JwtResponse(userResponse, token);
      }
      return new JwtResponse();
    } catch (Exception e) {
      log.error("tokenise-Error: {}", userResponse, e);
      return new JwtResponse();
    }
  }

  /**
   * Create a token
   *
   * @param userResponse
   * @return String
   */
  public String tokenise(UserResponse userResponse) {
    try {
      log.info("tokenise: {}", userResponse);
      String json = mapper.writeValueAsString(userResponse);
      return jwtService.createToken(json);
    } catch (Exception e) {
      log.error("tokenise-Error: {}", userResponse, e);
      return null;
    }
  }

  /**
   * Decrypt token
   *
   * @param token jwt token generated by this {@link JwtService#createToken(String)}
   * @return UserResponse
   */
  public UserResponse detokenise(String token) {
    try {
      log.info("detokenise: {}", token);
      String json = jwtService.decryptToken(token);
      return mapper.readValue(json, UserResponse.class);
    } catch (Exception e) {
      log.error("detokenise-Error: {}", token, e);
      return null;
    }
  }
}
